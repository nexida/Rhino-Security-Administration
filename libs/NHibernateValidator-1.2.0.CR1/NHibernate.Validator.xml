<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NHibernate.Validator</name>
    </assembly>
    <members>
        <member name="M:NHibernate.Validator.Cfg.IMappingsProvider.GetMappings">
            <summary>
            Get all mapped classes.
            </summary>
            <returns>All mapped classes for the current loader.</returns>
        </member>
        <member name="T:NHibernate.Validator.Cfg.INHVConfiguration">
            <summary>
            Contract for configuration sources.
            </summary>
        </member>
        <member name="P:NHibernate.Validator.Cfg.INHVConfiguration.SharedEngineProviderClass">
            <summary>
            Assembly qualified name for shared engine provider.
            </summary>
        </member>
        <member name="P:NHibernate.Validator.Cfg.INHVConfiguration.Properties">
            <summary>
            Configured properties.
            </summary>
        </member>
        <member name="P:NHibernate.Validator.Cfg.INHVConfiguration.Mappings">
            <summary>
            Configured Mappings.
            </summary>
        </member>
        <member name="P:NHibernate.Validator.Cfg.INHVConfiguration.EntityTypeInspectors">
            <summary>
            Configured Entity Type Inspectors.
            </summary>
            <seealso cref="T:NHibernate.Validator.Engine.IEntityTypeInspector"/>
        </member>
        <member name="M:NHibernate.Validator.Cfg.IMappingLoader.LoadMappings(System.Collections.Generic.IList{NHibernate.Validator.Cfg.MappingConfiguration})">
            <summary>
            Load all mappings configured in the nhv-configuration configuration section.
            </summary>
            <param name="configurationMappings">The list of configured mappings.</param>
        </member>
        <member name="M:NHibernate.Validator.Cfg.IMappingLoader.AddAssembly(System.String)">
            <summary>
            Adds all of the assembly's mappings.
            </summary>
            <param name="assemblyName">The assembly full name to load.</param>
            <seealso cref="M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)"/>
        </member>
        <member name="M:NHibernate.Validator.Cfg.IMappingLoader.AddAssembly(System.Reflection.Assembly)">
            <summary>
            Adds all of the assembly's mappings.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmClass">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmClass.attributename">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmClass.property">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmClass.name">
            <remarks/>
        </member>
        <member name="M:NHibernate.Validator.Cfg.MappingSchema.RuleAttributeFactory.CreateAttributeFromClass(System.Type,NHibernate.Validator.Cfg.MappingSchema.NhvmClassAttributename)">
            <summary>
            Create the attribute of a entity-validator from XML definitions.
            </summary>
            <param name="entityType">The entity class where associate the attribute.</param>
            <param name="attributename">The attribute name in the mapping.</param>
            <returns>The <see cref="T:System.Attribute"/> instance.</returns>
            <remarks>
            We are using the conventions:
            - The attribute must be defined in the same namespace of the <paramref name="entityType"/>.
            - The attribute class may have the postfix "Attribute" without need to use it in the mapping.
            </remarks>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmProperty">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmProperty.Items">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmProperty.name">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmAssertfalse">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmAssertfalse.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmAssertfalse.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmAsserttrue">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmAsserttrue.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmAsserttrue.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmCreditcardnumber">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmCreditcardnumber.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmCreditcardnumber.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmDecimalmax">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmDecimalmax.value">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmDecimalmax.valueSpecified">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmDecimalmax.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmDecimalmax.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmDecimalmin">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmDecimalmin.value">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmDecimalmin.valueSpecified">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmDecimalmin.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmDecimalmin.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmDigits">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmDigits.integerDigits">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmDigits.fractionalDigits">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmDigits.fractionalDigitsSpecified">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmDigits.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmDigits.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmEan">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmEan.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmEan.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmEmail">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmEmail.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmEmail.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmFileexists">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmFileexists.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmFileexists.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmFuture">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmFuture.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmFuture.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmIban">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmIban.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmIban.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmIpaddress">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmIpaddress.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmIpaddress.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmLength">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmLength.min">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmLength.minSpecified">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmLength.max">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmLength.maxSpecified">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmLength.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmLength.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmMax">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmMax.value">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmMax.valueSpecified">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmMax.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmMax.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmMin">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmMin.value">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmMin.valueSpecified">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmMin.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmMin.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmNotEmpty">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmNotEmpty.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmNotEmpty.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmNotNull">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmNotNull.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmNotNull.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmNotnullNotempty">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmNotnullNotempty.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmNotnullNotempty.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmPast">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmPast.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmPast.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmPattern">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmPattern.regex">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmPattern.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmPattern.regexoptions">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmPattern.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmRange">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmRange.min">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmRange.minSpecified">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmRange.max">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmRange.maxSpecified">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmRange.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmRange.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmRule">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmRule.param">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmRule.attribute">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmRule.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmParam">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmParam.name">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmParam.value">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmSize">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmSize.min">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmSize.minSpecified">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmSize.max">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmSize.maxSpecified">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmSize.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmSize.tags">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmValid">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvMapping">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvMapping.class">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvMapping.namespace">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvMapping.assembly">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingSchema.NhvmClassAttributename">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmClassAttributename.message">
            <remarks/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.MappingSchema.NhvmClassAttributename.Text">
            <remarks/>
        </member>
        <member name="T:NHibernate.Validator.Cfg.CfgXmlHelper">
            <summary>
            Helper to parse nhv-configuration XmlNode.
            </summary>
        </member>
        <member name="F:NHibernate.Validator.Cfg.CfgXmlHelper.CfgSectionName">
            <summary>
            The XML node name for hibernate configuration section in the App.config/Web.config and
            for the hibernate.cfg.xml .
            </summary>
        </member>
        <member name="F:NHibernate.Validator.Cfg.CfgXmlHelper.CfgSchemaXMLNS">
            <summary>The XML Namespace for the nhibernate-configuration</summary>
        </member>
        <member name="F:NHibernate.Validator.Cfg.CfgXmlHelper.SharedEngineClassExpression">
            <summary>XPath expression for shared-engine-class node</summary>
        </member>
        <member name="F:NHibernate.Validator.Cfg.CfgXmlHelper.PropertiesExpression">
            <summary>XPath expression for property nodes</summary>
        </member>
        <member name="F:NHibernate.Validator.Cfg.CfgXmlHelper.MappingsExpression">
            <summary>XPath expression for mapping nodes</summary>
        </member>
        <member name="F:NHibernate.Validator.Cfg.CfgXmlHelper.EntityTypeInspectorsExpression">
            <summary>XPath expression for entity-type-inspector nodes </summary>
        </member>
        <member name="M:NHibernate.Validator.Cfg.CfgXmlHelper.ValidatorModeConvertFrom(System.String)">
            <summary>
            Convert a given string to a <see cref="T:NHibernate.Validator.Engine.ValidatorMode"/>.
            </summary>
            <param name="validatorMode">The string</param>
            <returns>The result <see cref="T:NHibernate.Validator.Engine.ValidatorMode"/>.</returns>
            <exception cref="T:NHibernate.Validator.Exceptions.ValidatorConfigurationException">when the string don't have a valid value.</exception>
        </member>
        <member name="T:NHibernate.Validator.Cfg.ConfigurationSectionHandler">
            <summary>
            Readonly NHV configuration section handler
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Cfg.Environment">
            <summary>
            NHibernate Validator properties
            </summary>
        </member>
        <member name="F:NHibernate.Validator.Cfg.Environment.ApplyToDDL">
            <summary>
            Apply DDL changes on Hibernate metamodel when using validator with Hibernate Annotations.
            Default to true.
            </summary>
        </member>
        <member name="F:NHibernate.Validator.Cfg.Environment.AutoregisterListeners">
            <summary>
            Enable listeners auto registration in Hibernate Annotations and EntityManager.
            Default to true.
            </summary>
        </member>
        <member name="F:NHibernate.Validator.Cfg.Environment.MessageInterpolatorClass">
            <summary>
            Message interpolator class used. The same instance is shared across all ClassValidators 
            </summary>
        </member>
        <member name="F:NHibernate.Validator.Cfg.Environment.MappingLoaderClass">
            <summary>
            Mapping loader implementor.
            </summary>
        </member>
        <member name="F:NHibernate.Validator.Cfg.Environment.ConstraintValidatorFactoryClass">
            <summary>
            Constraint Validator Factory used to create Validators.
            </summary>
        </member>
        <member name="F:NHibernate.Validator.Cfg.Environment.ValidatorMode">
            <summary>
            Define validation mode.
            Default <see cref="F:NHibernate.Validator.Engine.ValidatorMode.UseAttribute"/>
            </summary>
            <remarks>
            Allowed values are available in <see cref="T:NHibernate.Validator.Engine.ValidatorMode"/>.
            </remarks>
            <seealso cref="T:NHibernate.Validator.Engine.ValidatorMode"/>
        </member>
        <member name="F:NHibernate.Validator.Cfg.Environment.BaseNameOfMessageResource">
            <summary>
            Base name of resource file for embedded validators.
            </summary>
        </member>
        <member name="F:NHibernate.Validator.Cfg.Environment.CustomResourceManager">
            <summary>
            The configuration property name for the custom resource manager
            </summary>
        </member>
        <member name="F:NHibernate.Validator.Cfg.Environment.SharedEngineClass">
            <summary>
            Define the provider of shared engine between various logical layers.
            </summary>
            <remarks>
            The main target of shared engine is have only one engine for the NHibernate events of validator.
            If an application configure a certain shared engine provider and use it to get the ValidatorEngine
            the result is that the events for NH configure the ValidatorEngine and the application can
            share the same engine ensuring that app and NH-event make the same validation.
            <para/>
            The configuration of shared_engine_provider is ignored outside app/web config file.
            </remarks>
        </member>
        <member name="P:NHibernate.Validator.Cfg.Environment.SharedEngineProvider">
            <summary>
            Shared engine provider instance.
            </summary>
            <remarks>
            The Shared engine instance can be injected at run-time even if if not the better way to work with it.
            </remarks>
        </member>
        <member name="T:NHibernate.Validator.Cfg.MappingConfiguration">
            <summary>
            Configuration parsed values for a mapping XML node
            </summary>
            <remarks>
            There are 3 possible combinations of mapping attributes
            1 - resource and assembly:  NHV will read the mapping resource from the specified assembly
            2 - file only: NHV will read the mapping from the file.
            3 - assembly only: NHV will find all the resources ending in nhv.xml from the assembly.
            </remarks>
        </member>
        <member name="M:NHibernate.Validator.Cfg.MappingConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Validator.Cfg.MappingConfiguration"/> class.
            </summary>
            <param name="file">Mapped file.</param>
            <exception cref="T:System.ArgumentException">When <paramref name="file"/> is null or empty.</exception>
        </member>
        <member name="M:NHibernate.Validator.Cfg.MappingConfiguration.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Validator.Cfg.MappingConfiguration"/> class.
            </summary>
            <param name="assembly">The assembly name.</param>
            <param name="resource">The mapped embedded resource.</param>
            <exception cref="T:System.ArgumentException">When <paramref name="assembly"/> is null or empty.</exception>
        </member>
        <member name="M:NHibernate.Validator.Cfg.MappingConfiguration.IsEmpty">
            <summary>
            Is the mapping element empty
            </summary>
            <returns>True if the element is empty; false otherwise.</returns>
        </member>
        <member name="P:NHibernate.Validator.Cfg.MappingConfiguration.File">
            <summary>
            The file of a mapped validator.
            </summary>
        </member>
        <member name="P:NHibernate.Validator.Cfg.MappingConfiguration.Assembly">
            <summary>
            The assembly name where validator mapping is.
            </summary>
        </member>
        <member name="P:NHibernate.Validator.Cfg.MappingConfiguration.Resource">
            <summary>
            The name of an embedded resource in the <see cref="P:NHibernate.Validator.Cfg.MappingConfiguration.Assembly"/>.
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Cfg.ValidatorInitializer">
            <summary>
            Extensions to integrate NHibernate.Validator with NHibernate
            </summary>
        </member>
        <member name="M:NHibernate.Validator.Cfg.ValidatorInitializer.Initialize(NHibernate.Cfg.Configuration)">
            <summary>
            Initialize NHibernate's events and/or DLL.
            </summary>
            <param name="cfg">The NHibernate.Cfg.Configuration before build the session factory.</param>
            <remarks>
            If the <see cref="T:NHibernate.Validator.Engine.ISharedEngineProvider"/> was configured or the
            <see cref="P:NHibernate.Validator.Cfg.Environment.SharedEngineProvider"/> was set, it will be used for the integration;
            otherwise a new <see cref="T:NHibernate.Validator.Engine.ValidatorEngine"/> will be configured and used.
            <para>
            To have DDL-integration you must set the configuration property "apply_to_ddl" to true
            </para>
            <para>
            To have events-integration you must set the configuration property "autoregister_listeners" to true
            </para>
            </remarks>
        </member>
        <member name="M:NHibernate.Validator.Cfg.ValidatorInitializer.Initialize(NHibernate.Cfg.Configuration,NHibernate.Validator.Engine.ValidatorEngine)">
            <summary>
            Initialize NHibernate's events and/or DLL.
            </summary>
            <param name="cfg">The NHibernate.Cfg.Configuration before build the session factory.</param>
            <param name="ve">A configured ValidatorEngine (after call <see cref="M:NHibernate.Validator.Engine.ValidatorEngine.Configure"/>)</param>
            <remarks>
            <para>
            To have DDL-integration you must set the configuration property "apply_to_ddl" to true
            </para>
            <para>
            To have events-integration you must set the configuration property "autoregister_listeners" to true
            </para>
            </remarks>
        </member>
        <member name="T:NHibernate.Validator.Cfg.XmlConfiguration">
            <summary>
            Configuration parsed values for nhv-configuration section.
            </summary>
        </member>
        <member name="M:NHibernate.Validator.Cfg.XmlConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Validator.Cfg.XmlConfiguration"/> class.
            </summary>
            <remarks>An empty configuration.</remarks>
        </member>
        <member name="M:NHibernate.Validator.Cfg.XmlConfiguration.#ctor(System.Xml.XmlReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Validator.Cfg.XmlConfiguration"/> class.
            </summary>
            <param name="configurationReader">The XML reader to parse.</param>
            <remarks>
            The nhv-configuration.xsd is applied to the XML.
            </remarks>
            <exception cref="T:NHibernate.Validator.Exceptions.ValidatorConfigurationException">When nhibernate-configuration.xsd can't be applied.</exception>
        </member>
        <member name="P:NHibernate.Validator.Cfg.XmlConfiguration.Properties">
            <summary>
            Configured properties
            </summary>
        </member>
        <member name="P:NHibernate.Validator.Cfg.XmlConfiguration.Mappings">
            <summary>
            Configured Mappings
            </summary>
        </member>
        <member name="M:NHibernate.Validator.Cfg.XmlMappingLoader.AddAssembly(System.Reflection.Assembly)">
            <summary>
            Adds all of the assembly's embedded resources whose names end with <c>.nhv.xml</c>.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>This configuration object.</returns>
        </member>
        <member name="M:NHibernate.Validator.Cfg.XmlMappingLoader.GetXmlMappingFor(System.Type)">
            <summary>
            Load and return a mapping for a given type.
            </summary>
            <param name="type">The given type.</param>
            <returns>The mapping.</returns>
            <remarks>
            The method use a convention to find the resource that represent the mapping for the given class.
            - The mapping must be compiled like embedded resource in the same assembly of the given type
            - The name o the resource must be the same name of the type and end with ".nhv.xml"
            - The resource must stay in the same namespace of the type
            </remarks>
        </member>
        <member name="T:NHibernate.Validator.Constraints.AssertFalseAttribute">
            <summary>
            The annotated element has to be false
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Constraints.EmbeddedRuleArgsAttribute">
            <summary>
            Base class for all embedded validators, accepting Tags.
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Engine.ITagableRule">
            <summary>
            Define a validator-definition (Attribute) which accept tags.
            </summary>
        </member>
        <member name="P:NHibernate.Validator.Constraints.EmbeddedRuleArgsAttribute.Tags">
            <summary>
            Collection of tags.
            </summary>
            <remarks>
            This property should be used only by Attribute.
            It is defined as object because language limitation 
            (see the end of http://msdn.microsoft.com/en-us/library/aa664616(VS.71).aspx).
            </remarks>
            <example>
            <code>
            [Max(100, Tags = new[] { typeof(Error), typeof(Warning) })]
            public int Value { get; set; }
            </code>
            </example>
        </member>
        <member name="T:NHibernate.Validator.Engine.IRuleArgs">
            <summary>
            All validators attributes must implement this interface.
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Engine.IValidator">
            <summary>
            A validator for a particular attribute
            </summary>
        </member>
        <member name="M:NHibernate.Validator.Engine.IValidator.IsValid(System.Object,NHibernate.Validator.Engine.IConstraintValidatorContext)">
            <summary>
            does the object/element pass the constraints
            </summary>
            <param name="value">Object to be validated</param>
            <param name="constraintValidatorContext">Context for the validator constraint</param>
            <returns>if the instance is valid</returns>
        </member>
        <member name="T:NHibernate.Validator.Constraints.AssertTrueAttribute">
            <summary>
            The annotated element has to be true
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Constraints.DecimalMaxAttribute">
            <summary>
            Max restriction on a numeric annotated element
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Engine.IPropertyConstraint">
            <summary>
            Interface implemented by the validator
            when a constraint may be represented in a
            hibernate metadata property
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Constraints.DecimalMinAttribute">
            <summary>
            Min restriction on a numeric annotated element (or the string representation of a numeric)
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Engine.IValidatorInstanceProvider">
            <summary>
            Define the contract for an object that can provide a Validator instance 
            instead a <see cref="T:NHibernate.Validator.Engine.IValidator"/> <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Constraints.DigitsAttribute">
            <summary>
            Checks wheter the member is a number having up to <c>IntegerDigits</c>,
            and <c>FractionalDigits</c> fractional digits.
            <remarks>
            <c>FractionalDigits</c> default value: 0.
            </remarks> 
            <code>
            For example:
            <example>
            - With [Digits(3)] //here FractionalDigits is zero.
            	- Valid values: 0; 9; 99; 99.0; null; 01;
            	- Invalid values: 1000; 10.1; "aa"; new object();
            
            - With [Digits(2,3)]
            	- Valid values: 0; 100.100; 99.99; 
            	- Invalid values: 1000.0; 9.233; 1233; 
            
            - With [Digits(0,2)]
            	- Valid values: 0; 0.1; 0.12;
            	- Invalid values: 1.12; 0.123
            </example>
            </code>
            </summary>
        </member>
        <member name="M:NHibernate.Validator.Constraints.DigitsAttribute.IsValid(System.Object,NHibernate.Validator.Engine.IConstraintValidatorContext)">
            <summary>
            does the object/element pass the constraints
            </summary>
            <param name="value">Object to be validated</param>
            <param name="constraintContext"></param>
            <returns>if the instance is valid</returns>
        </member>
        <member name="T:NHibernate.Validator.Constraints.EANAttribute">
            <summary>
            The Attribute element has to represent an EAN-13 or UPC-A
            which aims to check for user mistake, not actual number validity!
            http://en.wikipedia.org/wiki/European_Article_Number
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Constraints.EmailAttribute">
            <summary>
            The string has to be a well-formed email address
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Constraints.FileExistsAttribute">
            <summary>
            The file, where string is pointing to, must exist.
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Constraints.FutureAttribute">
            <summary>
            Check that a Date representation apply in the future
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Constraints.IBANAttribute">
            <summary>
            This expression matches an IBAN Code (International Bank Account Number)
            </summary>
        </member>
        <member name="F:NHibernate.Validator.Constraints.IBANAttribute.defs">
            <summary>
            Definitions of countries IBAN (Key=Country code as defined in ISO 3166; Value=IbanDefinition)
            </summary>
        </member>
        <member name="M:NHibernate.Validator.Constraints.IBANAttribute.GetValidatable(System.Collections.Generic.IEnumerable{System.Char},System.String@)">
            <summary>
            IBAN cleaner
            </summary>
            <param name="iban">Not cleaned IBAN</param>
            <param name="validable">The validatable IBAN</param>
            <returns>true if the <paramref name="iban"/> have all valid character; otherwise false</returns>
        </member>
        <member name="M:NHibernate.Validator.Constraints.IBANAttribute.IsValidModOfCin(System.String)">
            <summary>
            Validate the CIN for a given encoded IBAN
            </summary>
            <param name="encodedIban">The encoded IBAN.</param>
            <returns>true if the CIN is valid (mod=1); otherwise false</returns>
        </member>
        <member name="T:NHibernate.Validator.Constraints.IPAddressAttribute">
            <summary>
            Must be a valid IP address.
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Constraints.IsNumericAttribute">
            <summary>
            Check if string is a number.
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Constraints.LengthAttribute">
            <summary>
            Apply some length restrictions to the annotated element. It has to be a string
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Constraints.MaxAttribute">
            <summary>
            Max restriction on a numeric annotated element
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Constraints.MinAttribute">
            <summary>
            Min restriction on a numeric annotated element (or the string representation of a numeric)
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Constraints.NotEmptyAttribute">
            <summary>
            Check that a String is not empty (length > 0)
            or that a IEnumerable is not empty (Count > 0)
            </summary>
            <remarks>
            To validate for NotNull and Not Empty use NotNullNotEmptyAttribute.
            </remarks>
        </member>
        <member name="T:NHibernate.Validator.Constraints.NotNullAttribute">
            <summary>
            Ensure the member to be not null.
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Constraints.NotNullNotEmptyAttribute">
            <summary>
            Ensure a IEnumerable (including string) to be not null and not empty.
            <code>
            <example>
            Valid values: "abc"; new int[] {1}; new List&lt;int>(new int[] { 1 });
            Invalid values: null; ""; 123; new int[0]; new List&lt;int>();
            </example>
            </code>
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Constraints.PastAttribute">
            <summary>
            Check that a date representation apply in the past
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Constraints.PatternAttribute">
            <summary>
            The annotated element must follow the regex pattern
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Constraints.RangeAttribute">
            <summary>
            The annotated elemnt has to be in the appropriate range. Apply on numeric values or string
            representation of the numeric value.
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Constraints.SizeAttribute">
            <summary>
            Size range for Arrays, Collections (do not use with strings).
            <code>
            <example>
            -[SizeAttribute] range from 0 to int.MaxValue.
            Valid values: new int[0];
            
            [SizeAttribute(1,3)] range from 1 to 3.
            Valid values:  new int[1]; new int[3]
            Invalid values: new int[0];  new int[4]; "123"; 123;
            </example>
            </code>
            </summary>
        </member>
        <member name="M:NHibernate.Validator.Constraints.SizeAttribute.#ctor">
            <summary>
            Min = 0
            Max = int.MaxValue
            </summary>
        </member>
        <member name="M:NHibernate.Validator.Constraints.SizeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Min and Max are specified in the parameters.
            </summary>
            <param name="min">Min value to ensure</param>
            <param name="max">Max value to ensure</param>
        </member>
        <member name="T:NHibernate.Validator.Constraints.ValidAttribute">
            <summary>
            Enables recursive validation of an associated object
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Constraints.WithinAttribute">
            <summary>
            The annotated elemnt has to be in the appropriate range (excluding both limits).
            Apply on numeric values can be converted to double (<see cref="M:System.Convert.ToDouble(System.Object)"/>).
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Engine.ClassValidator">
            <summary>
            Engine that take a object and check every expressed attribute restrictions
            </summary>
        </member>
        <member name="M:NHibernate.Validator.Engine.IClassValidator.GetInvalidValues(System.Object)">
            <summary>
            Apply constraints on a entity instance and return all the failures.
            if <paramref name="entity"/> is null, an empty array is returned 
            </summary>
            <param name="entity">object to apply the constraints</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Validator.Engine.IClassValidator.GetInvalidValues(System.Object,System.String)">
            <summary>
            Apply constraints on a entity instance and return all the failures for the given property.
            if <paramref name="entity"/> is null, an empty array is returned. 
            </summary>
            <param name="entity">Object to apply the constraints</param>
            <param name="propertyName">The name of the property to validate.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Validator.Engine.IClassValidator.AssertValid(System.Object)">
            <summary>
            Assert a valid Object. A <see cref="T:NHibernate.Validator.Exceptions.InvalidStateException"/> 
            will be throw in a Invalid state.
            </summary>
            <param name="entity">Object to be asserted</param>
        </member>
        <member name="M:NHibernate.Validator.Engine.IClassValidator.GetPotentialInvalidValues(System.String,System.Object)">
            <summary>
            Apply constraints of a particular property value of a entity type and return all the failures.
            The InvalidValue objects returns return null for <see cref="P:NHibernate.Validator.Engine.InvalidValue.Entity"/> and <see cref="P:NHibernate.Validator.Engine.InvalidValue.RootEntity"/>.
            </summary>
            <param name="propertyName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Validator.Engine.IClassValidator.Apply(NHibernate.Mapping.PersistentClass)">
            <summary>
            Apply the registred constraints rules on the hibernate metadata (to be applied on DB schema)
            </summary>
            <param name="persistentClass">hibernate metadata</param>
        </member>
        <member name="M:NHibernate.Validator.Engine.IClassValidator.GetMemberConstraints(System.String)">
            <summary>
            Get the list of constraints declared for a give member of the entityValidator
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>The list of attribute of the given property.</returns>
        </member>
        <member name="M:NHibernate.Validator.Engine.IClassValidator.GetInvalidValues(System.Object,System.Object[])">
             <summary>
             Apply constraints on a entity instance and return all the failures.
             if <paramref name="entity"/> is null, an empty array is returned 
             </summary>
             <param name="entity">object to apply the constraints</param>
            <param name="tags">list of tags enabled fpr the validation.</param>
            <returns>Invalid values</returns>
        </member>
        <member name="M:NHibernate.Validator.Engine.IClassValidator.GetInvalidValues(System.Object,System.String,System.Object[])">
             <summary>
             Apply constraints on a entity instance and return all the failures for the given property.
             if <paramref name="entity"/> is null, an empty array is returned. 
             </summary>
             <param name="entity">Object to apply the constraints</param>
             <param name="propertyName">The name of the property to validate.</param>
            <param name="tags">list of tags enabled fpr the validation.</param>
            <returns>Invalid values</returns>
        </member>
        <member name="M:NHibernate.Validator.Engine.IClassValidator.GetPotentialInvalidValues(System.String,System.Object,System.Object[])">
             <summary>
             Apply constraints of a particular property value of a entity type and return all the failures.
             The InvalidValue objects returns return null for <see cref="P:NHibernate.Validator.Engine.InvalidValue.Entity"/> and <see cref="P:NHibernate.Validator.Engine.InvalidValue.RootEntity"/>.
             </summary>
             <param name="propertyName">The name of the property to validate.</param>
             <param name="value">the potential value of the property.</param>
            <param name="tags">list of tags enabled fpr the validation.</param>
            <returns>Invalid values</returns>
        </member>
        <member name="P:NHibernate.Validator.Engine.IClassValidator.HasValidationRules">
            <summary>
            Return true if this <see cref="T:NHibernate.Validator.Engine.ClassValidator"/> contains rules for apply, false in other case. 
            </summary>
        </member>
        <member name="F:NHibernate.Validator.Engine.ClassValidator.userInterpolatorType">
            <summary>
            Used to create an instance when deserialize
            </summary>
        </member>
        <member name="M:NHibernate.Validator.Engine.ClassValidator.#ctor(System.Type)">
            <summary>
            Create the validator engine for this entity type. 
            </summary>
            <remarks>
            Used in Unit Testing.
            </remarks>
            <param name="entityType"></param>
        </member>
        <member name="M:NHibernate.Validator.Engine.ClassValidator.#ctor(System.Type,System.Resources.ResourceManager,System.Globalization.CultureInfo,NHibernate.Validator.Engine.ValidatorMode)">
            <summary>
            Create the validator engine for a particular entity class, using a resource bundle
            for message rendering on violation
            </summary>
            <remarks>
            Used in Unit Testing.
            </remarks>
            <param name="entityType">entity type</param>
            <param name="resourceManager"></param>
            <param name="culture">The CultureInfo for the <paramref name="entityType"/>.</param>
            <param name="validatorMode">Validator definition mode</param>
        </member>
        <member name="M:NHibernate.Validator.Engine.ClassValidator.#ctor(System.Type,System.Resources.ResourceManager,NHibernate.Validator.Engine.IMessageInterpolator,System.Globalization.CultureInfo,NHibernate.Validator.Engine.ValidatorMode)">
            <summary>
            Create the validator engine for a particular entity class, using a resource bundle
            for message rendering on violation
            </summary>
            <remarks>
            Used in Unit Testing.
            </remarks>
            <param name="entityType">entity type</param>
            <param name="resourceManager"></param>
            <param name="userInterpolator">Custom interpolator.</param>
            <param name="culture">The CultureInfo for the <paramref name="entityType"/>.</param>
            <param name="validatorMode">Validator definition mode</param>
        </member>
        <member name="M:NHibernate.Validator.Engine.ClassValidator.InitValidator(System.Type,System.Collections.Generic.IDictionary{System.Type,NHibernate.Validator.Engine.IClassValidator})">
            <summary>
            Initialize the <see cref="T:NHibernate.Validator.Engine.ClassValidator"/> type.
            </summary>
            <param name="clazz"></param>
            <param name="nestedClassValidators"></param>
        </member>
        <member name="M:NHibernate.Validator.Engine.ClassValidator.GetInvalidValues(System.Object)">
            <summary>
            Apply constraints on a entity instance and return all the failures.
            if <paramref name="entity"/> is null, an empty array is returned 
            </summary>
            <param name="entity">object to apply the constraints</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Validator.Engine.ClassValidator.ChildInvalidValues(System.Object,System.Object,System.Reflection.MemberInfo,System.Collections.Generic.HashSet{System.Object},System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Validate the child validation to objects and collections
            </summary>
        </member>
        <member name="M:NHibernate.Validator.Engine.ClassValidator.GetClassValidator(System.Type)">
            <summary>
            Get the ClassValidator for the <paramref name="objectType"/>
            parametter  from <see cref="F:NHibernate.Validator.Engine.ClassValidator.childClassValidators"/>. If doesn't exist, a 
            new <see cref="T:NHibernate.Validator.Engine.ClassValidator"/> is returned.
            </summary>
            <param name="objectType">type</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Validator.Engine.ClassValidator.CreateOrGetValidator(System.Attribute)">
            <summary>
            Create a <see cref="T:NHibernate.Validator.Engine.IValidator"/> from a <see cref="T:NHibernate.Validator.Engine.ValidatorClassAttribute"/> attribute.
            If the attribute is not a <see cref="T:NHibernate.Validator.Engine.ValidatorClassAttribute"/> type return null.
            </summary>
            <param name="attribute">attribute</param>
            <returns>the validator for the attribute</returns>
        </member>
        <member name="M:NHibernate.Validator.Engine.ClassValidator.CreateChildValidator(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Create the validator for the children, who got the <see cref="T:NHibernate.Validator.Constraints.ValidAttribute"/>
            on the fields or properties
            </summary>
        </member>
        <member name="M:NHibernate.Validator.Engine.ClassValidator.AddSuperClassesAndInterfaces(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Add recursively the inheritance tree of types (Classes and Interfaces)
            to the parameter <paramref name="classes"/>
            </summary>
            <param name="clazz">Type to be analyzed</param>
            <param name="classes">Collections of types</param>
        </member>
        <member name="M:NHibernate.Validator.Engine.ClassValidator.AssertValid(System.Object)">
            <summary>
            Assert a valid Object. A <see cref="T:NHibernate.Validator.Exceptions.InvalidStateException"/> 
            will be throw in a Invalid state.
            </summary>
            <param name="entity">Object to be asserted</param>
        </member>
        <member name="M:NHibernate.Validator.Engine.ClassValidator.GetPotentialInvalidValues(System.String,System.Object)">
            <summary>
            Apply constraints of a particular property value of a entity type and return all the failures.
            The InvalidValue objects returns an empty enumerable for InvalidValue#Entity and InvalidValue#RootEntity.
            Note: this is not recursive.
            </summary>
            <param name="propertyName">Name of the property or field to validate</param>
            <param name="value">Real value to validate. Is not an entity instance.</param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Validator.Engine.ClassValidator.Apply(NHibernate.Mapping.PersistentClass)">
            <summary>
            Apply the registred constraints rules on the hibernate metadata (to be applied on DB schema)
            </summary>
            <param name="persistentClass">hibernate metadata</param>
        </member>
        <member name="P:NHibernate.Validator.Engine.ClassValidator.HasValidationRules">
            <summary>
            Return true if this <see cref="T:NHibernate.Validator.Engine.ClassValidator"/> contains rules for apply, false in other case. 
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Engine.ClassValidator.JITClassValidatorFactory">
            <summary>
            Just In Time ClassValidatorFactory
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Engine.DefaultEntityTypeInspector">
            <summary>
            An <see cref="T:NHibernate.Validator.Engine.IEntityTypeInspector"/> for proxy coming from NHibernate.
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Engine.IEntityTypeInspector">
            <summary>
            Inspector to find the real type of an entity instance.
            </summary>
            <remarks>
            En entity instace can be a dynamic proxy.
            Implementors shoud recognize the proxy and return the <see cref="T:System.Type"/>
            of the target.
            If the type is not a proxy the implementors shouldn't recognize it.
            </remarks>
        </member>
        <member name="M:NHibernate.Validator.Engine.IEntityTypeInspector.GuessType(System.Object)">
            <summary>
            Guess the type of the entity instance.
            </summary>
            <param name="entityInstance">The entity instance</param>
            <returns>The <see cref="T:System.Type"/> of the entity if was recognized; otherwise null.</returns>
        </member>
        <member name="T:NHibernate.Validator.Engine.IInitializableValidator`1">
            <summary>
            Contract for validator that need initialization.
            </summary>
            <typeparam name="A">The attribute that hold validator parameters.</typeparam>
        </member>
        <member name="M:NHibernate.Validator.Engine.IInitializableValidator`1.Initialize(`0)">
            <summary>
            Take the attribute values and Initialize the Validator
            </summary>
            <param name="parameters">parameters</param>
        </member>
        <member name="T:NHibernate.Validator.Engine.IMessageInterpolator">
            <summary>
            Responsible for validator message interpolation (variable replacement etc)
            this extension point is useful if the call has some contextual informations to
            interpolate in validator messages
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Engine.InvalidValue">
            <summary>
            A single violation of a class level or method level constraint.
            </summary>
            <remarks>
            Created by <see cref="T:NHibernate.Validator.Engine.ClassValidator"/>. The ctor is public only for test scope.
            </remarks>
        </member>
        <member name="T:NHibernate.Validator.Engine.IPersistentClassConstraint">
            <summary>
            Interface implemented by the validator
            when a constraint may be represented in the
            hibernate metadata
            </summary>
        </member>
        <member name="M:NHibernate.Validator.Engine.IPersistentClassConstraint.Apply(NHibernate.Mapping.PersistentClass)">
            <summary>
             Apply the constraint in the hibernate metadata
            </summary>
            <param name="persistentClass">PersistentClass</param>
        </member>
        <member name="T:NHibernate.Validator.Engine.ISharedEngineProvider">
            <summary>
            Contract for Shared Engine Provider
            </summary>
            <remarks>
            The SharedEngineProvider is the service locator for the ValidatorEngine.
            More information about why use the Shared Engine Provider are availables in this post :
            http://fabiomaulo.blogspot.com/2009/02/diving-in-nhibernatevalidator.html
            </remarks>
        </member>
        <member name="M:NHibernate.Validator.Engine.ISharedEngineProvider.GetEngine">
            <summary>
            Provide the shared engine instance.
            </summary>
            <returns>The validator engine.</returns>
        </member>
        <member name="T:NHibernate.Validator.Engine.JITClassMappingFactory">
            <summary>
            Just In Time Class Mapping Factory
            </summary>
            <remarks>
            The JITClassMappingFactory work outside the engine configuration.
            </remarks>
        </member>
        <member name="T:NHibernate.Validator.Engine.MultiEntityTypeInspector">
            <summary>
            Allow multiple <see cref="T:NHibernate.Validator.Engine.IEntityTypeInspector"/> to work just a <see cref="T:NHibernate.Validator.Engine.IEntityTypeInspector"/>.
            </summary>
            <remarks>
            The <see cref="T:NHibernate.Validator.Engine.MultiEntityTypeInspector"/> iterate a list of <see cref="T:NHibernate.Validator.Engine.IEntityTypeInspector"/>
            for the first position to the last and return the first match.
            </remarks>
        </member>
        <member name="T:NHibernate.Validator.Engine.ReferenceEqualityComparer">
            <summary>
            <see cref="T:System.Collections.IEqualityComparer"/> used to prevent circular state validation.
            </summary>
            <remarks>
            The equality of two instances if done by Reference instead use the possible override of each element.
            The same for hash-code.
            </remarks>
        </member>
        <member name="M:NHibernate.Validator.Engine.StateFullClassValidatorFactory.GetRootValidator(System.Type)">
            <summary>
            Get the validator for a type. If doesn't exists, will create one, add to the engine and return it.
            </summary>
            <param name="type">Type for the validator</param>
            <returns>Validator encountered or created-and-added.</returns>
        </member>
        <member name="T:NHibernate.Validator.Engine.ValidatableElement">
            <summary>
            The element of an validation.
            </summary>
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatableElement.#ctor(System.Type,NHibernate.Validator.Engine.IClassValidator)">
            <summary>
            Create a new instance of <see cref="T:NHibernate.Validator.Engine.ValidatableElement"/> for a root element.
            </summary>
            <param name="entityType">The type of the entity.</param>
            <param name="validator">The validator.</param>
            <remarks>
            The root element is the entity it self.
            </remarks>
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatableElement.#ctor(System.Type,NHibernate.Validator.Engine.IClassValidator,NHibernate.Properties.IGetter)">
            <summary>
            Create a new instance of <see cref="T:NHibernate.Validator.Engine.ValidatableElement"/> for a composite element.
            </summary>
            <param name="entityType">The type of the composite element.</param>
            <param name="validator">The validator of the composite element.</param>
            <param name="getter">The getter of the composite element inside the root entity.</param>
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatableElement.AddSubElement(NHibernate.Validator.Engine.ValidatableElement)">
            <summary>
            Add a <see cref="T:NHibernate.Validator.Engine.ValidatableElement"/>.
            </summary>
            <param name="subValidatableElement">The sub element</param>
            <seealso cref="M:NHibernate.Validator.Engine.ValidatableElement.#ctor(System.Type,NHibernate.Validator.Engine.IClassValidator,NHibernate.Properties.IGetter)"/>
            <seealso cref="P:NHibernate.Validator.Engine.ValidatableElement.SubElements"/>
        </member>
        <member name="P:NHibernate.Validator.Engine.ValidatableElement.EntityType">
            <summary>
            The type of the entity
            </summary>
        </member>
        <member name="P:NHibernate.Validator.Engine.ValidatableElement.Validator">
            <summary>
            The validator of the <see cref="P:NHibernate.Validator.Engine.ValidatableElement.EntityType"/>.
            </summary>
        </member>
        <member name="P:NHibernate.Validator.Engine.ValidatableElement.Getter">
            <summary>
            The getter of the composite element inside the root entity.
            </summary>
        </member>
        <member name="P:NHibernate.Validator.Engine.ValidatableElement.SubElements">
            <summary>
            Composite Elements.
            </summary>
        </member>
        <member name="P:NHibernate.Validator.Engine.ValidatableElement.HasSubElements">
            <summary>
            Has SubElements ?
            </summary>
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatorClassAttribute.#ctor(System.String)">
            <summary>
            In order to point to a validator in other assembly.
            <code>
            <example> 
            </example>
            </code>
            </summary>
            <param name="fullAssemblyQualifyName"></param>
        </member>
        <member name="T:NHibernate.Validator.Engine.ValidatorEngine">
            <summary>
            The engine of NHibernate Validator
            </summary>
            <remarks>
            The engine is the easy way to work with NHibernate.Validator.
            It hold all class validators.
            Usually an application will create a single <see cref="T:NHibernate.Validator.Engine.ValidatorEngine"/>.
            </remarks>
            <seealso cref="T:NHibernate.Validator.Cfg.Environment"/>
            <seealso cref="T:NHibernate.Validator.Engine.ISharedEngineProvider"/>.
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatorEngine.Configure">
            <summary>
            Configure NHibernate.Validator using the <c>&lt;nhv-configuration&gt;</c> section
            from the application config file, if found, or the file <c>nhvalidator.cfg.xml</c> if the
            <c>&lt;nhv-configuration&gt;</c> section not include the session-factory configuration.
            If both are found merge the two configuration.
            </summary>
            <remarks>
            To configure NHibernate explicitly using <c>nhvalidator.cfg.xml</c>, appling merge/override
            of the application configuration file, use this code:
            <code>
            	configuration.Configure("path/to/nhvalidator.cfg.xml");
            </code>
            </remarks>
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatorEngine.Configure(System.String)">
            <summary>
            Configure NHibernate.Validator using the file specified.
            </summary>
            <param name="configFilePath">The location of the XML file to use to configure NHibernate.Validator.</param>
            <remarks>
            Calling Configure(string) will override/merge the values set in app.config or web.config
            </remarks>
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatorEngine.Configure(System.Xml.XmlReader)">
            <summary>
            Configure NHibernate.Validator using the specified <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="configReader">The <see cref="T:System.Xml.XmlReader"/> that contains the Xml to configure NHibernate.Validator.</param>
            <remarks>
            Calling Configure(XmlReader) will overwrite the values set in app.config or web.config
            </remarks>
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatorEngine.Configure(NHibernate.Validator.Cfg.INHVConfiguration)">
            <summary>
            Configure NHibernate.Validator using the specified <see cref="T:NHibernate.Validator.Cfg.INHVConfiguration"/>.
            </summary>
            <param name="config">The <see cref="T:NHibernate.Validator.Cfg.INHVConfiguration"/> that is the configuration reader to configure NHibernate.Validator.</param>
            <remarks>
            Calling Configure(INHVConfiguration) will overwrite the values set in app.config or web.config.
            <para>
            You can use this overload is you are working with Attributes or Xml-files.
            </para>
            </remarks>
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatorEngine.Configure(NHibernate.Validator.Cfg.INHVConfiguration,NHibernate.Validator.Cfg.IMappingLoader)">
            <summary>
            Configure NHibernate.Validator using the specified <see cref="T:NHibernate.Validator.Cfg.INHVConfiguration"/>.
            </summary>
            <param name="config">The <see cref="T:NHibernate.Validator.Cfg.INHVConfiguration"/> that is the configuration reader to configure NHibernate.Validator.</param>
            <param name="mappingLoader">The <see cref="T:NHibernate.Validator.Cfg.XmlMappingLoader"/> instance.</param>
            <remarks>
            Calling Configure(INHVConfiguration) will overwrite the values set in app.config or web.config
            </remarks>
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatorEngine.Validate(System.Object,System.Object[])">
            <summary>
            Apply constraints/rules on a entity instance.
            </summary>
            <param name="entity">The entity instance to validate</param>
            <param name="activeTags">Tags included in the validation.</param>
            <returns>All the failures or an empty array if <paramref name="entity"/> is null.</returns>
            <remarks>
            If the <see cref="T:System.Type"/> of the <paramref name="entity"/> was never inspected, or
            it was not configured, the <see cref="T:NHibernate.Validator.Engine.IClassValidator"/> will be automatic added to the engine.
            </remarks>
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatorEngine.IsValid(System.Object,System.Object[])">
            <summary>
            Apply constraints/rules on a entity instance.
            </summary>
            <param name="entity">The entity instance to validate</param>
            <param name="activeTags">Tags included in the validation.</param>
            <returns>
            False if there is one or more the failures; True otherwise (including when <paramref name="entity"/> is null).
            </returns>
            <remarks>
            If the <see cref="T:System.Type"/> of the <paramref name="entity"/> was never inspected, or
            it was not configured, the <see cref="T:NHibernate.Validator.Engine.IClassValidator"/> will be automatic added to the engine.
            </remarks>
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatorEngine.AssertValid(System.Object)">
            <summary>
            Assert a valid entity.
            </summary>
            <param name="entity">The entity instance to validate</param>
            <exception cref="T:NHibernate.Validator.Exceptions.InvalidStateException">when <paramref name="entity"/> have an invalid state.</exception>
            <remarks>
            If the <see cref="T:System.Type"/> of the <paramref name="entity"/> was never inspected, or
            it was not configured, the <see cref="T:NHibernate.Validator.Engine.IClassValidator"/> will be automatic added to the engine.
            </remarks>
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatorEngine.ValidatePropertyValue``1(System.String,System.Object,System.Object[])">
            <summary>
            Use the <see cref="M:NHibernate.Validator.Engine.ClassValidator.GetPotentialInvalidValues(System.String,System.Object)"/> for a given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The entity type</typeparam>
            <param name="propertyName">The name of a property</param>
            <param name="value">The value of the property.</param>
            <param name="activeTags">Tags included in the validation.</param>
            <returns>All the invalid values.</returns>
            <remarks>
            If the <typeparamref name="T"/> was never inspected, or
            it was not configured, the <see cref="T:NHibernate.Validator.Engine.IClassValidator"/> will be automatic added to the engine.
            </remarks>
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatorEngine.ValidatePropertyValue``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,System.Object[])">
            <summary>
            Use the <see cref="M:NHibernate.Validator.Engine.ClassValidator.GetPotentialInvalidValues(System.String,System.Object)"/> for a given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="TEntity">The entity type</typeparam>
            <typeparam name="TProperty">The property type.</typeparam>
            <param name="expression">The lamda expression of the property getter.</param>
            <param name="value">The potencial value of the property.</param>
            <param name="activeTags">Tags included in the validation.</param>
            <remarks>
            If the <typeparamref name="TEntity"/> was never inspected, or
            it was not configured, the <see cref="T:NHibernate.Validator.Engine.IClassValidator"/> will be automatic added to the engine.
            </remarks>
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatorEngine.ValidatePropertyValue(System.Object,System.String,System.Object[])">
            <summary>
            Use the <see cref="M:NHibernate.Validator.Engine.ClassValidator.GetPotentialInvalidValues(System.String,System.Object)"/> for a given entity instance.
            </summary>
            <param name="entity">The entity instance to validate</param>
            <param name="propertyName">The name of a property</param>
            <param name="activeTags">Tags included in the validation.</param>
            <returns>All the invalid values.</returns>
            <remarks>
            If the <see cref="T:System.Type"/> of the <paramref name="entity"/> was never inspected, or
            it was not configured, the <see cref="T:NHibernate.Validator.Engine.IClassValidator"/> will be automatic added to the engine.
            </remarks>
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatorEngine.ValidatePropertyValue(System.Type,System.String,System.Object,System.Object[])">
            <summary>
            Use the <see cref="M:NHibernate.Validator.Engine.ClassValidator.GetPotentialInvalidValues(System.String,System.Object)"/> for a given entity instance.
            </summary>
            <param name="entityType">The entity instance to validate</param>
            <param name="propertyName">The name of a property</param>
            <param name="value">The value of the property.</param>
            <param name="activeTags">Tags included in the validation.</param>
            <returns>All the invalid values.</returns>
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatorEngine.AddValidator``1">
            <summary>
            Add a validator to the engine or override existing one.
            </summary>
            <typeparam name="T">The type of an entity.</typeparam>
            <remarks>
            Create an istance of <see cref="T:NHibernate.Validator.Engine.IClassValidator"/> for the given <typeparamref name="T"/>.
            </remarks>
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatorEngine.AddValidator``1(NHibernate.Validator.Engine.IValidatableSubElementsInspector)">
            <summary>
            Add a validator to the engine or override existing one.
            </summary>
            <typeparam name="T">The type of an entity.</typeparam>
            <param name="inspector">Inspector for sub-elements</param>
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatorEngine.GetValidator``1">
            <summary>
            Gets an acquaintance <see cref="T:NHibernate.Validator.Engine.IClassValidator"/>.
            </summary>
            <typeparam name="T">The type of an entity.</typeparam>
            <returns>A acquaintance <see cref="T:NHibernate.Validator.Engine.IClassValidator"/> for the give type 
            or null if the the <typeparamref name="T"/> was never used in the engine instance.</returns>
        </member>
        <member name="M:NHibernate.Validator.Engine.ValidatorEngine.GetClassValidator(System.Type)">
            <summary>
            Gets a <see cref="T:NHibernate.Validator.Engine.IClassValidator"/> for a given <see cref="T:System.Type"/>
            </summary>
            <param name="entityType">The given <see cref="T:System.Type"/>.</param>
            <returns>
            A validator for a <see cref="T:System.Type"/> or null if the <paramref name="entityType"/>
            is not supported by <see cref="T:NHibernate.Validator.Engine.ClassValidator"/>.
            </returns>
            <remarks>
            In general a common application don't need to use this method but it can be useful for some kind of framework.
            </remarks>
        </member>
        <member name="P:NHibernate.Validator.Engine.ValidatorEngine.Interpolator">
            <summary>
            Default MessageInterpolator
            </summary>
        </member>
        <member name="P:NHibernate.Validator.Engine.ValidatorEngine.DefaultMode">
            <summary>
            Default Mode to construct validators
            </summary>
        </member>
        <member name="P:NHibernate.Validator.Engine.ValidatorEngine.ApplyToDDL">
            <summary>
            Database schema-level validation enabled
            </summary>
        </member>
        <member name="P:NHibernate.Validator.Engine.ValidatorEngine.AutoRegisterListeners">
            <summary>
            NHibernate event-based validation
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Engine.ValidatorMode">
            <summary>
            Define how to investigate validators of a class.
            </summary>
        </member>
        <member name="F:NHibernate.Validator.Engine.ValidatorMode.UseAttribute">
            <summary>
            Validators are discovered, by reflection, only investigating the class attributes
            </summary>
        </member>
        <member name="F:NHibernate.Validator.Engine.ValidatorMode.UseExternal">
            <summary>
            Validator are discovered only parsing the xml of the class
            </summary>
        </member>
        <member name="F:NHibernate.Validator.Engine.ValidatorMode.OverrideAttributeWithExternal">
            <summary>
            Validators are discovered, by reflection, investigating the class attributes
            and then using the xml(or any other external source), merging both.
            Conflicts are solved using xml-configuration over attribute-configuration.
            </summary>
        </member>
        <member name="F:NHibernate.Validator.Engine.ValidatorMode.OverrideExternalWithAttribute">
            <summary>
            Validators are discovered, by reflection, investigating the class attributes
            and then using the xml(or any other external source), merging both.
            Conflicts are solved using attribute-configuration over xml-configuration.
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Event.ValidateEventListener">
            <summary>
            Common environment for insert and update NH event listeners
            </summary>
        </member>
        <member name="T:NHibernate.Validator.Event.ValidatePreInsertEventListener">
            <summary>
            Before insert, executes the validator framework
            </summary>
            <remarks>
            Because, usually, we validate on insert and on update we are
            using the same environment for PreInsert and  PreUpdate event listeners,
            the initialization of the environment (the ValidatorEngine) was or will be done in 
            ValidatePreInsertEventListener by NH.
            This give us better performance on NH startup.
            </remarks>
        </member>
        <member name="M:NHibernate.Validator.Event.ValidatePreInsertEventListener.Initialize(NHibernate.Cfg.Configuration)">
            <summary>
            Initialize the validators, any non significant validators are not kept
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="T:NHibernate.Validator.Event.ValidatePreUpdateEventListener">
            <summary>
            Before update, executes the validator framework
            </summary>
            <remarks>
            Because, usually, we validate on insert and on update we are
            using the same environment for PreInsert and  PreUpdate event listeners,
            the initialization of the environment (the ValidatorEngine) was or will be done in 
            ValidatePreInsertEventListener by NH.
            This give us better performance on NH startup.
            </remarks>
        </member>
        <member name="T:NHibernate.Validator.Exceptions.AssertionFailureException">
            <summary>
            Indicates failure of an assertion: a possible bug in NHibernate.Validator
            </summary>
        </member>
        <member name="M:NHibernate.Validator.Exceptions.AssertionFailureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Validator.Exceptions.AssertionFailureException"/> class.
            </summary>
        </member>
        <member name="M:NHibernate.Validator.Exceptions.AssertionFailureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Validator.Exceptions.AssertionFailureException"/> class.
            </summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:NHibernate.Validator.Exceptions.AssertionFailureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Validator.Exceptions.AssertionFailureException"/> class.
            </summary>
            <param name="message">The message that describes the error. </param>
            <param name="innerException">
            The exception that is the cause of the current exception. If the innerException parameter 
            is not a null reference, the current exception is raised in a catch block that handles 
            the inner exception.
            </param>
        </member>
        <member name="M:NHibernate.Validator.Exceptions.AssertionFailureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NHibernate.Validator.Exceptions.AssertionFailureException"/> class.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object 
            data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="M:NHibernate.Validator.Interpolator.DefaultMessageInterpolator.GetAttributeOrResourceValue(System.String)">
            <summary>
            Get the value of an Attribute's property or the value in the resource for a given key.
            </summary>
            <param name="token">The property-name of the attribute or key to find in the resources.</param>
            <returns>The string in the resource or null where not found.</returns>
        </member>
        <member name="M:NHibernate.Validator.Interpolator.DefaultMessageInterpolator.GetPropertyValue(System.Object,System.String)">
            <summary>
            Override this method to obtain flexibility.
            The default interpolator can replace the message with public property values.
            </summary>
            <param name="entity">Entity or value</param>
            <param name="propertyName">Property name to be used.</param>
            <returns>The value of the property</returns>
        </member>
        <member name="T:NHibernate.Validator.Util.AttributeUtils">
            <summary>
            Utils metods for attributes
            </summary>
        </member>
        <member name="M:NHibernate.Validator.Util.AttributeUtils.AttributeAllowsMultiple(System.Attribute)">
            <summary>
            Returns true if the attribute can be declared more than one time for the same element
            </summary>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="T:NHibernate.Validator.Util.TypeUtils">
            <summary>
            Utils methods for type issues.
            </summary>
        </member>
        <member name="M:NHibernate.Validator.Util.TypeUtils.GetGenericTypesOfDictionary(System.Reflection.MemberInfo)">
            <summary>
            Get the Generic Arguments of a <see cref="T:System.Collections.Generic.IDictionary`2"/>
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Validator.Util.TypeUtils.GetTypeOfMember(System.Reflection.MemberInfo)">
            <summary>
            Get the type of the a Field or Property. 
            If is a: Generic Collection or a Array, return the type of the elements.
            </summary>
            <param name="member">MemberInfo, represent a property or field</param>
            <returns>type of the member or collection member</returns>
        </member>
        <member name="M:NHibernate.Validator.Util.TypeUtils.IsEnumerable(System.Type)">
            <summary>
            Indicates if a <see cref="N:NHibernate.Type"/> is <see cref="T:System.Collections.IEnumerable"/>
            </summary>
            <param name="clazz"></param>
            <returns>is enumerable or not</returns>
        </member>
        <member name="M:NHibernate.Validator.Util.TypeUtils.GetType(System.Reflection.MemberInfo)">
            <summary>
            Get the <see cref="N:NHibernate.Type"/> of a <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:NHibernate.Validator.Util.TypeUtils.GetMemberValue(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Get the value of some Property or Field.
            </summary>
            <param name="entity"></param>
            <param name="member"></param>
            <returns></returns>
        </member>
    </members>
</doc>
